#!/usr/bin/env bash

#
# The backup user account has the access keys to the on-site backup service.
#
BACKUP_USER="{{ backup_user | default(admin_username) }}"
BACKUP_GROUP="{{ backup_group | default( backup_user | default(admin_username) ) }}"
BACKUPS_DIR="{{ backup_directory | default('/var/local/backup_client') }}"
OUTBOUND_QUEUE="${BACKUPS_DIR}/out"
mkdir -p ${OUTBOUND_QUEUE}
chown -R ${BACKUP_USER}:${BACKUP_GROUP} ${BACKUPS_DIR}
chmod -R o-rwx ${BACKUPS_DIR}

cd "${BACKUPS_DIR}"
umask 077

algorithm=aes-256-cbc

#
# Create encrypted archives and their password files:
#
for filename in /usr/local/etc/backup_client.d/*.conf; do
(
    unset database directory name service_name
    . "${filename}"
    timestamp="$(date -u +'%FT%H%MZ')"
    archive="${name}_${HOSTNAME}_${timestamp}"

    if [ -n "$database" ]; then
        echo Archiving the PostgreSQL database: ${database}
        /usr/local/sbin/archive_pgsql_db -n "${archive}" -d "${database}"
    elif [ -n "$directory" ]; then
        echo Archiving the file system directory: ${directory}
        /usr/local/sbin/archive_dir -n "${archive}" -d "${directory}"
    fi

    EXITVALUE=$?
    if [ $EXITVALUE -eq 0 ]; then
        /usr/local/sbin/archive_encrypt -n "${archive}" -a "${algorithm}"

        mkdir -p ${OUTBOUND_QUEUE}/${name}
        mv --force --target-directory="${OUTBOUND_QUEUE}/${name}/"\
         ${name}_*.{pass.safe,${algorithm},sha256}
    else
        echo "Deleting the interrupted archive ${archive}" 1>&2
        rm --force ${archive}.*gz
    fi
)
done

#
# Remove any leftovers from possibly interrupted tasks:
#
ls | grep -P '^.*\.(tmp|pass\.txt|tgz|gz|sha256)$'
if [ $? -eq 0 ]; then
    rm -f *.tmp *.pass.txt *.tgz *.gz *.sha256
    echo "Removed the file(s) left behind." >&2
fi

#
# Transfer the encrypted archive and password file to the backup service:
#
chown -R ${BACKUP_USER}:${BACKUP_GROUP} ${OUTBOUND_QUEUE}

#
# Delete any old transfer logs:
#
su - ${BACKUP_USER} -c "rm -f ~/.lftp/*_log"

LFTP="open -u {{ backup_onsite_account }}, {{ backup_onsite_protocol }}://{{ backup_onsite_service }};"
REMOTE_DIR="`date -u +"%Y-%m"`/`hostname`${clientdir}"

MONTH_RETAIN="`date -u +"%Y-%m" --date="3 months ago"`"
MONTH_DELETE="`date -u +"%Y-%m" --date="4 months ago"`"

nice -n 19 su - ${BACKUP_USER} -c "lftp -c '${LFTP}\
 mkdir -p ${REMOTE_DIR};\
 mirror --Remove-source-files -R ${OUTBOUND_QUEUE} ${REMOTE_DIR}'\
 > /dev/null 2>&1"

nice -n 19 su - ${BACKUP_USER} -c "lftp -c '${LFTP}\
 ls ${MONTH_RETAIN} && rm -r ${MONTH_DELETE};'\
 > /dev/null 2>&1"

#
# Print the transfer log destinations and bitrates to standard output: 
#
echo Transfers completed
su - ${BACKUP_USER} -c\
 "cat ~/.lftp/*_log 2>/dev/null | cut -d ' ' -f2,5- ; rm -f ~/.lftp/*_log"
echo Finished.
exit 0
