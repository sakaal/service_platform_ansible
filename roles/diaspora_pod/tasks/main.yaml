# file: roles/diaspora_pod/tasks/main.yaml
#
# A Diaspora pod on CentOS 7 with PostgreSQL
#
# Based on:
# https://wiki.diasporafoundation.org/Installation/CentOS/7?db=postgres&mode=production
#
# Please note that at the time of this writing Diaspora deployment was not very
# mature yet and the author of this script is unfamiliar with Ruby. This is not
# a robust solution as it stands today.
# However, this is open source so feel free to make it better!
#
---

- name: Required packages
  with_items:
  - tar
  - make
  - automake
  - gcc
  - gcc-c++
  - git
  - net-tools
  - libcurl-devel
  - libxml2-devel
  - libffi-devel
  - libxslt-devel
  - wget
  - redis
  - ImageMagick
  - nodejs
  - postgresql-devel
  become: yes
  yum: name="{{ item }}"

#
# These packages are needed only for the way how Diaspora is deployed here.
#
- name: Other packages
  with_items:
  - incron
  become: yes
  yum: name="{{ item }}"

- name: Create the Diaspora user account
  become: yes
  user: name={{ diaspora_user | mandatory }} comment="Diaspora" shell=/bin/bash

- name: Clone the Diaspora source repository master branch
  become: yes
  become_user: "{{ diaspora_user }}"
  command: chdir="/home/{{ diaspora_user }}" creates="diaspora" 
           git clone https://github.com/diaspora/diaspora.git diaspora
  register: diaspora_cloned

#
# If updating the Diaspora version fails, the installation will still continue
# with whatever version is present.
#
- name: Get the latest version of Diaspora
  when: diaspora_cloned|skipped
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: chdir="{{ diaspora_dir }}"
         git fetch --all; git reset --hard origin/master
  ignore_errors: yes

#
# https://keybase.io/mpapis
# D39DC0E3: public key "Michal Papis (RVM signing) <mpapis@gmail.com>"
#
- name: Check the GPG public key of Michal Papis
  become: yes
  become_user: "{{ diaspora_user }}"
  command: gpg2 --list-public-keys
  register: gpg_public_keys
  changed_when: not "D39DC0E3" in gpg_public_keys.stdout

- name: GPG public key of Michal Papis
  when: gpg_public_keys|changed
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3

#
# TODO: Improve security with how RVM is installed?
#
- name: Ruby Version Manager (RVM)
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: creates="/home/{{ diaspora_user }}/.rvm"
         curl -L https://get.rvm.io | bash -s stable

- name: Load the user's .profile with Bash
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: dest="/home/{{ diaspora_user }}/.bash_profile"
              regexp="/.profile\s*$" line="source ~/.profile"
              insertafter="^.*PATH.*$"

- name: Install the rvm command for Bash
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: dest="/home/{{ diaspora_user }}/.bash_profile"
              regexp="^.*rvm/scripts/rvm.*source.*rvm/scripts/rvm.*$"
              line='[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"'
              insertafter="^.*PATH.*$"

- name: Install Ruby (This may take a while...)
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: bash -lc "rvm install 2.0"
  register: ruby_install
  changed_when: ruby_install.stderr is not defined
                or 'Already installed' not in ruby_install.stderr

- name: New configuration
  with_items:
  - "database"
  - "diaspora"
  become: yes
  become_user: "{{ diaspora_user }}"
  command: chdir="{{ diaspora_dir }}/config"
           creates="{{ item }}.yaml"
           cp "{{ item }}.yaml.example" "{{ item }}.yaml"

- name: Delete default database configuration
  with_items:
  - "^\\s*host:.+localhost"
  - "^\\s*username:.+postgres\\s*$"
  - "^\\s*password:.{0,5}$"
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: dest="{{ diaspora_dir }}/config/database.yaml"
              regexp="{{ item }}"
              state=absent

- name: Comment out MySQL
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/database.yaml"
              regexp="^\s+#?<<:\s+\*mysql\s*$"
              line="  #<<: *mysql"

- name: Uncomment PostgreSQL
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/database.yaml"
              regexp="^\s+#?<<:\s+\*postgres\s*$"
              line="  <<: *postgres"

- name: PostgreSQL host
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/database.yaml"
              insertbefore="^\s+port:\s+5432\s*$"
              line="  host: {{ diaspora_db_host|mandatory }}"

- name: PostgreSQL username
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/database.yaml"
              insertafter="^\s+port:\s+5432\s*$"
              line="  username: {{ diaspora_db_username|mandatory }}"

- name: PostgreSQL password
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/database.yaml"
              insertafter="^\s+username:\s+{{ diaspora_db_username }}\s*$"
              line='  password: "{{ diaspora_db_password|mandatory }}"'

- name: Public URI
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/diaspora.yaml"
              insertafter="^\s+#url:.*https?://example.org/.*$"
              line='    url: "https://{{ public_hostname | mandatory }}/"'

- name: Certificate Authorities (CAs)
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/diaspora.yaml"
              insertafter="^\s+#certificate_authorities:.*$"
              line='    certificate_authorities: "/etc/pki/tls/certs/ca-bundle.crt"'

- name: Rails environment
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: >
              dest="{{ diaspora_dir }}/config/diaspora.yaml"
              insertafter="^\s+#rails_environment:.*$"
              line='    rails_environment: "production"'

- name: Bundle Ruby libraries (This may take a while...)
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: chdir="{{ diaspora_dir }}"
         bash -lc "bundle install --without test development"
  environment:
    RAILS_ENV: production
    DB: postgres

#
# You must have created the diaspora_production database and user
# before this step with: roles/postgresql_databases
#
# In the standard Diaspora installation procedure, "rake db:create" only
# creates the database, which we have already created. Here, we only load
# the schema. 
#
- name: Database setup
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: chdir="{{ diaspora_dir }}"
         bash -lc "bundle exec rake db:schema:load"
  environment:
    RAILS_ENV: production
    DB: postgres
  register: diaspora_database_setup
  changed_when: diaspora_database_setup.rc == 0
  failed_when: diaspora_database_setup.stderr is defined and
               ('database "diaspora_production" does not exist'
               in diaspora_database_setup.stderr)

- name: Precompile assets
  become: yes
  become_user: "{{ diaspora_user }}"
  shell: chdir="{{ diaspora_dir }}"
         bash -lc "bundle exec rake assets:precompile"
  environment:
    DB: postgres

- name: Enable the Redis persistent key-value database service
  become: yes
  service: name=redis enabled=yes state=started

#
# This step is related to Rails version differences. In Rails 4, the secret
# token initializer configuration option has been renamed from secret_token
# to secret_key_base. Both options are needed when migrating from Rails 3.
# Once the migration has completed, the secret_token option can be removed.
#
- name: Change back to Rails 3 secret token
  become: yes
  become_user: "{{ diaspora_user }}"
  lineinfile: dest="{{ diaspora_dir }}/config/initializers/secret_token.rb"
              backrefs=yes
              regexp="^Diaspora::Application.config.secret_key_base\s+=\s+(.*)$"
              line="Diaspora::Application.config.secret_token = \1"

- name: System V init script
  become: yes
  template: src="diaspora.j2" dest="/etc/init.d/diaspora"
            owner=root group=root mode=755

#
# The following uploads/images directory processing script and image transfer
# script both belong to a quick and dirty solution to move uploaded images to
# the Apache front end. See the scan_uploads.sh.j2 script for notes on this.
#

- name: diaspora_user bin directory
  become: yes
  become_user: "{{ diaspora_user }}"
  file: state=directory dest="/home/{{ diaspora_user }}/bin"

- name: Directory processing script
  become: yes
  become_user: "{{ diaspora_user }}"
  template: src="scan_uploads.sh.j2"
            dest="/home/{{ diaspora_user }}/bin/diaspora_scan_uploads"
            mode=750

- name: Image transfer script
  become: yes
  become_user: "{{ diaspora_user }}"
  template: src="transfer_image.sh.j2"
            dest="/home/{{ diaspora_user }}/bin/diaspora_transfer_image"
            mode=750

- name: Incrontab to monitor uploads/images
  become: yes
  template: src="diaspora_uploads.incrontab.j2"
            dest="/etc/incron.d/diaspora_uploads"
            mode=644
  notify:
  - Reload incron

- name: Enable the incrond service
  service: name=incrond enabled=yes state=started

- name: Make sure that the firewall is up
  become: yes
  service: name=firewalld enabled=yes state=started

#
# This is assuming the default firewall zone, as the Diaspora server is
# supposed to be running behind a proxy.
#
- name: Open the firewall for Diaspora
  become: yes
  command: firewall-cmd --permanent --add-port=3000/tcp
  notify:
  - Reload firewall

#
# TODO: This remains a manual step: Set the config.secret_key in
# diaspora/config/initializers/devise.rb according to the value seen in log
# when trying to start the server. Where is this value coming from anyway?
#

#
# The service management process already has a mechanism in place for deploying
# static web content, see:
# service_platform_ansible/roles/http_server
# com.example_main_ansible/websites
#
# When you want to install or update the Diaspora static web content, copy the
# diaspora/public directory contents to the relevant host directory under the
# main CMDB websites; for example to:
# com.example_main_ansible/websites/pod.example.com/htdocs/.
# After the static content is in place, it will be deployed automatically as a
# part of web servers deployment.
#

- name: Custom splash page
  become: yes
  become_user: "{{ diaspora_user }}"
  template: src="_show.html.haml.j2"
            dest="{{ diaspora_dir }}/app/views/home/_show.html.haml"

- name: Custom mobile splash page
  become: yes
  become_user: "{{ diaspora_user }}"
  template: src="_show.html.haml.j2"
            dest="{{ diaspora_dir }}/app/views/home/_show.mobile.haml"
  notify:
  - Restart Diaspora

- name: Enable the diaspora service
  become: yes
  service: name=diaspora enabled=yes state=started
