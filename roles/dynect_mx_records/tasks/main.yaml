# file: roles/dynect_mx_records/tasks/main.yaml
#
# Creates DNS MX, DKIM TXT, and SPF TXT records via the DynECT API.
#
---

- name: Check if mail domains already have MX records
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/MXRecord/{{ mail_domain }}/{{ mail_domain }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
  register: domain_mx_records

- name: Examine the mail domain existing MX records
  when: domain_mx_records is success
  with_items: "{{ domain_mx_records.json.data }}"
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/MXRecord/{{ mail_domain }}/{{ mail_domain
          }}/{{ item | basename }}"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
  register: current_mx_records

- name: Update mail domain MX records
  with_items: "{{ current_mx_records.results | default([]) }}"
  when: (item.json.data.rdata.exchange == (public_hostname + '.')) and
        (item.json.data.rdata.preference != dns_mx_preference)
  local_action:
    module: uri
    method: PUT
    url: "{{ dynect_api_url }}/MXRecord/{{ mail_domain }}/{{ mail_domain
          }}/{{ item.json.data.record_id }}"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        exchange: "{{ public_hostname }}"
        preference: "{{ dns_mx_preference }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"
  register: updated_mx_records
  changed_when: True

- name: Determine if any DNS MX records have changed
  with_items: "{{ current_mx_records.results | default([]) }}"
  when: (item.json.data.rdata.exchange == (public_hostname + '.')) and
        (item.json.data.rdata.preference == dns_mx_preference)
  debug: msg="MX record unchanged"
  register: existing_mx_record
  changed_when: False

- name: Make mail domain MX records
  when: not (public_hostname + '.') in
        current_mx_records | json_query('results[*].json.data.rdata.exchange')
  local_action:
    module: uri
    method: POST
    url: "{{ dynect_api_url }}/MXRecord/{{ mail_domain }}/{{ mail_domain }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        exchange: "{{ public_hostname }}"
        preference: "{{ dns_mx_preference }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"

#
# DomainKeys Identified Mail (DKIM) TXT records
#
# roles/postfix_standalone brings the dkim_dns.results
#

- name: Check if mail domains already have DKIM TXT records
  with_items: "{{ dkim_dns.results }}"
  when: (not item is skipped) and item.ansible_facts.dkim_managed | bool
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/TXTRecord/{{ item.ansible_facts.dkim_domain
          }}/{{ item.item.ansible_facts.dkim_txt_attr_name }}.{{ item.ansible_facts.dkim_domain }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
  register: zone_txt_records
  ignore_errors: yes

- name: Update mail domain DKIM TXT records
  with_items: "{{ zone_txt_records.results }}"
  when: (not item is skipped) and item is success and
        item.item.ansible_facts.dkim_state == 'present'
  local_action:
    module: uri
    method: PUT
    url: "{{ item.url }}{{ item.json.data.0 | basename }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        txtdata: "{{ item.item.ansible_facts.dkim_txt_data }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"
  register: updated_txt_records
  changed_when: True

- name: Delete mail domain DKIM TXT records
  with_items: "{{ zone_txt_records.results }}"
  when: (not item is skipped) and item is success and
        item.item.ansible_facts.dkim_state == 'absent'
  local_action:
    module: uri
    method: DELETE
    url: "{{ item.url }}/{{ item.json.data.0 | basename }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
  changed_when: True

- name: Make mail domain DKIM TXT records
  with_items: "{{ updated_txt_records.results }}"
  when: item is skipped and
        item.item.item.ansible_facts is defined and
        item.item.item.ansible_facts.dkim_state == 'present' and
        item.item.item.ansible_facts.dkim_managed | bool
  local_action:
    module: uri
    method: POST
    url: "{{ dynect_api_url }}/TXTRecord/{{ item.item.item.ansible_facts.dkim_domain
          }}/{{ item.item.item.item.ansible_facts.dkim_txt_attr_name
          }}.{{ item.item.item.ansible_facts.dkim_domain }}/"
    headers:
      Content-Type="application/json"
      Auth-Token="{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        txtdata: "{{ item.item.item.ansible_facts.dkim_txt_data }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"

#
# Sender Policy Framework (SPF) records
#
# http://en.wikipedia.org/wiki/Sender_Policy_Framework
#
# Every domain name or host that has an A record or MX record should have
# an SPF TXT record specifying the policy if it is used either in an email
# address or as HELO/EHLO argument.
#

- name: Check if DNS zones already have SPF TXT records
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/TXTRecord/{{ public_dns_zone
          }}/{{ public_dns_zone }}/"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
  register: zone_spf_records
  ignore_errors: yes

- name: Check if mail domains have existing TXT records
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/TXTRecord/{{ mail_domain }}/{{ mail_domain }}/"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
  register: zone_spf_records
  ignore_errors: yes

- name: Check which TXT records are SPF records
  when: zone_spf_records is success
  with_items: "{{ zone_spf_records.json.data }}"
  local_action:
    module: uri
    url: "{{ dynect_api_url }}/TXTRecord/{{ mail_domain }}/{{ mail_domain
          }}/{{ item | basename }}/"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
  register: zone_spf_records
  changed_when: zone_spf_records.json.data.rdata.txtdata is match('v=spf.*')

- name: Update mail domain SPF TXT records
  with_items: "{{ zone_spf_records.results }}"
  when: item is changed
  local_action:
    module: uri
    method: PUT
    url: "{{ dynect_api_url }}/TXTRecord/{{ mail_domain }}/{{ mail_domain
          }}/{{ item.json.data.record_id }}/"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        txtdata: "{{ dns_spf_data }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"
  register: updated_spf_records
  changed_when: True

- name: Make mail domain SPF TXT records
  when: updated_spf_records is skipped
  local_action:
    module: uri
    method: POST
    url: "{{ dynect_api_url }}/TXTRecord/{{ mail_domain }}/{{ mail_domain }}/"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
    body_format: json
    body:
      rdata:
        txtdata: "{{ dns_spf_data }}"
      ttl: "{{ dns_mail_ttl | default(1800) }}"

- name: Publish mail domains
  local_action:
    module: uri
    method: PUT
    url: "{{ dynect_api_url }}/Zone/{{ mail_domain }}"
    headers:
      Content-Type: "application/json"
      Auth-Token: "{{ dynect_session_token }}"
    body_format: json
    body:
      publish: true
