# file: roles/http_server/tasks/main.yaml
---

- name: Apache HTTP Server
  become: yes
  yum: name=httpd

#
# On the list of websites the first item is considered the default.
#
- when: websites is defined
  set_fact: http_server_name="{{ websites.0 }}"

#
# The public hostname (that also has reverse DNS resolution) may be the same
# as the domain name (just example.com). A wildcard certificate does not match
# that, so the default website should be different, usually www.example.com.
#
- when: (websites is not defined) and
        public_hostname is defined and (public_hostname != public_dns_zone) 
  set_fact: http_server_name="{{ public_hostname }}"

#
# When all else fails, use the FQDN. Note that this may be an internal name
# that is not necessarily found in the DNS.
#
- when: (http_server_name is not defined) or http_server_name.strip() == ""
  set_fact: http_server_name="{{ ansible_fqdn }}"

- name: HTTP server name
  become: yes
  lineinfile: dest=/etc/httpd/conf/httpd.conf
              regexp='^\s*ServerName\s'
              line="ServerName {{ http_server_name }}:80"
              insertafter='^#\s*ServerName'

- name: HTTP server administrator public email address conforming to RFC 2142
  become: yes
  lineinfile:
    dest: '/etc/httpd/conf/httpd.conf'
    regexp: '^\s*ServerAdmin\s'
    line: "ServerAdmin webmaster@{{ public_dns_zone }}"
    insertafter: '^#\s*ServerAdmin'

- name: HTTP server password file
  with_items: "{{ htpasswd_users | default([]) }}"
  become: yes
  lineinfile:
    dest: '/etc/httpd/.htpasswd'
    regexp: '^{{ item.user }}:'
    line: "{{ item.user }}:{{ item.password }}"
    state: "{{ item.state | default('present') }}"
    create: yes
    owner: root
    group: root
    mode: 0644

- name: HTTP server document root
  become: yes
  lineinfile: dest=/etc/httpd/conf/httpd.conf
              regexp='^\s*DocumentRoot\s'
              line="DocumentRoot "/var/www/{{ http_server_name }}/htdocs""
              insertafter='^#\s*DocumentRoot'

- name: Query if the HTTP service has been added to the firewall zone
  become: yes
  command: firewall-cmd --zone={{ firewall_zone }}
           --query-service=http
  register: zone_http
  changed_when: (zone_http.rc != 0) or not zone_http.stdout|bool
  failed_when: None

- name: Open the firewall for the HTTP service
  when: zone_http is changed
  become: yes
  command: firewall-cmd --permanent --zone={{ firewall_zone | mandatory }}
           --add-service=http
  notify: Restart firewalld
