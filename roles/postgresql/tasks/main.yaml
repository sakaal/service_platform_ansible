# file: roles/postgresql/tasks/main.yaml
#
# PostgreSQL relational database management system (RDBMS)
#
---

- name: Check if PostgreSQL version is configured
  when: postgresql_version is not defined
  fail:
    msg: You must set postgresql_version to the major version.

- name: Check if PostgreSQL packages are configured
  when: postgresql_packages is not defined
  fail:
    msg: You must set postgresql_packages to list the package names.

- name: Check if PostgreSQL host-based authentication is configured
  when: postgresql_hba is not defined
  fail:
    msg: You must set postgresql_hba to list authenticated hosts.

- name: Check PostgreSQL host-based authentication entries
  with_items: "{{ postgresql_hba | default([]) }}"
  when: item.type is not defined or
        item.database is not defined or
        item.user is not defined or
        item.method is not defined
  fail:
    msg: >-
         The following entry in the postgresql_hba list is invalid:
         {{ item }}
         Each list entry must be a dictionary with values for keys
         'type', 'database', 'user', 'cidr', and 'method'.

- name: PostgreSQL repository
  include_tasks: repo.yaml

- name: PostgreSQL server and adapter packages
  with_items: "{{ postgresql_packages }}"
  become: yes
  yum:
    name: "{{ item }}"

- name: Find the PostgreSQL data directory
  shell: "cat /etc/passwd | grep '^postgres:' | cut -d: -f6"
  register: postgres_home
  failed_when: postgres_home.stdout.strip() == ""
  changed_when: False

- name: Determine the PostgreSQL data directory location
  set_fact:
    postgresql_pgdata: "{{ postgres_home.stdout.strip()
                        }}/{{ postgresql_version }}/data"

- name: Check the PostgreSQL data directory structure
  become: yes
  shell: "PATH=$PATH:/usr/pgsql-{{ postgresql_version }}/bin;
          {{ postgresql_name }}-check-db-dir {{ postgresql_pgdata }};"
  register: pgdata_status
  changed_when: pgdata_status.rc != 0
  failed_when: False

- name: Check if manual intervention is necessary
  when: pgdata_status is changed and 'version' in pgdata_status.stdout
  fail:
    msg: "{{ pgdata_status.stdout }}"

- name: Initialize the database cluster
  when: pgdata_status is changed and 'initdb' in pgdata_status.stdout
  become: yes
  environment:
    PGSETUP_INITDB_OPTIONS: >
                            --no-locale
                            -D '{{ postgresql_pgdata }}'
                            -E UNICODE
  shell: "PATH=$PATH:/usr/pgsql-{{ postgresql_version }}/bin;
          {{ postgresql_name }}-setup initdb;"
  notify:
   - Restart PostgreSQL

#
# PostgreSQL configuration
# TODO: This is development configuration. Needs plenty tuning for production.
#
- name: PostgreSQL configuration
  with_items:
  - key: listen_addresses
    val: "'{{ postgresql_listen }},localhost'"
  - key: max_connections
    val: "{{ postgresql_max_connections | default(40) }}"
  - key: shared_buffers
    val: "{{ postgresql_shared_buffers | default('256MB') }}"
  - key: effective_cache_size
    val: "{{ postgresql_effective_cache_size | default('1GB') }}"
  - key: checkpoint_segments
    val: "{{ postgresql_checkpoint_segments | default(20) }}"
  - key: checkpoint_completion_target
    val: "{{ postgresql_checkpoint_completion_target | default(0.9) }}"
  - key: log_min_error_statement
    val: "{{ postgresql_log_min_error_statement | default('ERROR') }}"
  - key: log_min_duration_statement
    val: "{{ postgresql_log_min_duration_statement | default('5000ms') }}"
  - key: log_line_prefix
    val: "'%t:%r:%u@%d:[%p]: '"
  - key: log_statement
    val: "{{ postgresql_log_statement | default('none') }}"
  - key: work_mem
    val: "{{ postgresql_work_mem | default('4MB') }}"
  - key: maintenance_work_mem
    val: "{{ postgresql_maintenance_work_mem | default('64MB') }}"
  - key: wal_buffers
    val: "{{ postgresql_wal_buffers | default('-1') }}"
  - key: synchronous_commit
    val: "{{ postgresql_synchronous_commit | default('on') }}"
  become: yes
  lineinfile:
    dest: "{{ postgresql_pgdata }}/postgresql.conf"
    regexp: "^\\s*{{ item.key }}\\s*="
    line: "{{ item.key }} = {{ item.val }}"
    insertafter: "^#+\\s*{{ item.key }}"
  notify:
  - Restart PostgreSQL

#
# TODO: Further reduce the need of manual configuration. Manage apps, not CIDRs. 
#
- name: PostgreSQL host-based authentication
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_pgdata }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0600
  notify:
  - Reload PostgreSQL

- name: Enable and start the PostgreSQL service
  service:
    name: "postgresql-{{ postgresql_version }}"
    enabled: yes
    state: started

- name: Open the internal firewall for PostgreSQL
  become: yes
  firewalld:
    permanent: yes
    immediate: yes
    zone: internal
    service: postgresql
    state: enabled

- name: Monitoring script
  include_tasks: check_postgres.yaml
