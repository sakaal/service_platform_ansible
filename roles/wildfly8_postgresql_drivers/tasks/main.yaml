# file: roles/wildfly8_postgresql_drivers/tasks/main.yaml
#
# Deploy PostgreSQL JDBC drivers to WildFly 8 Application Server
#
---

- name: Create module directories for PostgreSQL JDBC drivers
  become: yes
  become_user: "{{ wildfly8_user }}"
  file: state=directory
        path={{ wildfly8_home }}/modules/system/layers/base/org/postgresql
  file: state=directory
        path={{ wildfly8_home }}/modules/system/layers/base/org/postgresql/main

- name: Check the JDBC drivers already installed in WildFly 8
  become: yes
  become_user: "{{ wildfly8_user }}"
  command: chdir="{{ wildfly8_home | mandatory }}"
           {{ wildfly8_cli | mandatory }} --connect
           --command='/subsystem=datasources:installed-drivers-list'
           --timeout=200
  register: wildfly8_jdbc_drivers

- name: Download any missing PostgreSQL JDBC drivers locally
  run_once: yes
  with_items: postgresql_jdbc_drivers
  when: (item.state|mandatory == "present") and
        not 'postgresql-{{ item.version }}-{{ item.build }}.{{ item.spec }}'
        in wildfly8_jdbc_drivers.stdout
  local_action:
    get_url dest="{{ files_dir }}/postgresql-{{ item.version
                  }}-{{ item.build }}.{{ item.spec }}.jar"
            force=no validate_certs=no
            sha256sum="{{ item.sha256sum | mandatory }}"
            url="http://jdbc.postgresql.org/download/postgresql-{{
                 item.version }}-{{ item.build }}.{{ item.spec }}.jar"

#
# You must manually undeploy all applications that are using old datasources,
# and then remove the old datasources. You can do this from the application
# server administration console.
#
#- name: Check JDBC data sources
#  become: yes
#  become_user: "{{ wildfly8_user | mandatory }}"
#  command: chdir="{{ wildfly8_home | mandatory }}"
#           {{ wildfly8_cli | mandatory }} --connect
#           --command='/subsystem=datasources:read-children-names(child-type=data-source)'
#  register: wildfly8_datasources_result
#
#- name: Remove JDBC data sources
#  with_items: wildfly8_datasources|default([])
#  when: not wildfly8_datasources_result|skipped
#        '{{ item.name | mandatory }}' in wildfly8_datasources_result.stdout
#  become: yes
#  become_user: "{{ wildfly8_user }}"
#  command: chdir="{{ wildfly8_home | mandatory }}"
#           {{ wildfly8_cli | mandatory }} --connect
#           --command='/subsystem=datasources/data-source={{
#           item.name | mandatory }}:remove'
#

- name: Unregister old PostgreSQL JDBC drivers
  with_items: postgresql_jdbc_drivers
  when: (item.state|mandatory == "absent") and 
        'postgresql-{{ item.version }}-{{ item.build }}.{{ item.spec }}'
        in wildfly8_jdbc_drivers.stdout
  become: yes
  become_user: "{{ wildfly8_user }}"
  command: chdir="{{ wildfly8_home | mandatory }}"
           {{ wildfly8_cli | mandatory }} --connect
           --command='/subsystem=datasources/jdbc-driver=postgresql-{{
           item.version }}-{{ item.build }}.{{ item.spec }}:remove'

- name: Undeploy old PostgreSQL JDBC drivers
  with_items: postgresql_jdbc_drivers
  when: item.state|mandatory == "absent"
  become: yes
  become_user: "{{ wildfly8_user }}"
  file: dest="{{ wildfly8_home | mandatory
              }}/modules/system/layers/base/org/postgresql/main/postgresql-{{
              item.version }}-{{ item.build }}.{{ item.spec }}.jar"
        state=absent

- name: Deploy PostgreSQL JDBC drivers as WildFly 8 modules
  with_items: postgresql_jdbc_drivers
  when: (item.state|mandatory == "present") and 
        not 'postgresql-{{ item.version }}-{{ item.build }}.{{ item.spec }}'
        in wildfly8_jdbc_drivers.stdout
  become: yes
  become_user: "{{ wildfly8_user }}"
  copy: src="postgresql-{{ item.version }}-{{ item.build }}.{{ item.spec }}.jar"
        dest="{{ wildfly8_home | mandatory
              }}/modules/system/layers/base/org/postgresql/main/postgresql-{{
              item.version }}-{{ item.build }}.{{ item.spec }}.jar"

- name: Deploy module descriptors for PostgreSQL JDBC drivers
  become: yes
  become_user: "{{ wildfly8_user }}"
  template: src=module.xml.j2 dest={{ wildfly8_home
            }}/modules/system/layers/base/org/postgresql/main/module.xml

- name: Register PostgreSQL JDBC drivers
  with_items: postgresql_jdbc_drivers
  when: not 'postgresql-{{ item.version }}-{{ item.build }}.{{ item.spec }}'
        in wildfly8_jdbc_drivers.stdout
  become: yes
  become_user: "{{ wildfly8_user }}"
  command: chdir="{{ wildfly8_home | mandatory }}"
           {{ wildfly8_cli | mandatory }} --connect
           --command='/subsystem=datasources/jdbc-driver=postgresql-{{
           item.version }}-{{ item.build }}.{{ item.spec
           }}:add(driver-name=postgresql-{{
           item.version }}-{{ item.build }}.{{ item.spec
           }},driver-module-name={{ item.module | mandatory
           }},driver-xa-datasource-class-name={{
           item.xa_datasource_class | mandatory }})'
